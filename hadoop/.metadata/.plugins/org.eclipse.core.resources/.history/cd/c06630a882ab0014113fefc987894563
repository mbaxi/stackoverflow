package com.mbaxi.hadoop;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class MapRedB {

	private static class MapRed_B_Mapper extends Mapper<Object,Text,Text,IntWritable> {
	    private Text word = new Text();
	    
	    @Override
	    public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
	    	StringTokenizer itr = new StringTokenizer(value.toString());
	    	while (itr.hasMoreTokens()) {
	    		word.set(itr.nextToken());
	    		context.write(word, one);
	    	}
	    }

	}
	private static class MapRed_B_Reducer extends Reducer<Text,IntWritable,Text,IntWritable> {
		private IntWritable result = new IntWritable();

		public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
	      int sum = 0;
	      for (IntWritable val : values) {
	        sum += val.get();
	      }
	      result.set(sum);
	      context.write(key, result);
	    }
	}

	public static Job getJob(String[] args) throws IOException
	{
	    Configuration conf = new Configuration();
	    Job job = Job.getInstance(conf, "word count");
	    job.setJarByClass(MapRedA.class);
	    job.setMapperClass(MapRed_B_Mapper.class);
	    job.setReducerClass(MapRed_B_Reducer.class);
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));

		return job;
	}

    public static void main( String[] args ) throws IOException, ClassNotFoundException, InterruptedException
    {
		String inputPath = args[0]; // This job takes as input output of Mapper of job MapRedA
		String outPath = args[1];
		
		String[] inPaths = new String[]{inputPath, outPath}; 
				
		Job mapRedA = MapRedA.getJob(inPaths); 
		mapRedA.submit();
		mapRedA.waitForCompletion(true);
    }

}
